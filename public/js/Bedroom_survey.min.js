b4w.register("Bedroom Survey", function(Q, e) {
    function R(a, d) {
        d ? (E.create_preloader(), a.addEventListener("mousedown", F), a.addEventListener("touchstart", F), a.addEventListener("mouseup", G), a.addEventListener("touchend", G), a.addEventListener("mousemove", H), a.addEventListener("touchmove", H), window.onresize = A.resize_to_container, A.resize_to_container(), n.load(q + "environment.json", S, T)) : console.log("b4w init failure")
    }

    function T(a) {
        E.update_preloader(a)
    }

    function S() {
        r.enable_camera_controls(!1, !1, !1, A.get_canvas());
        U();
        var a = g.get_object_by_name("spawner");
        h.get_translation(a, B)
    }

    function U() {
        var a = document.getElementById("spinner-container");
        document.getElementById("controls-container").style.display = "block";
        V();
        document.getElementById("load-1").addEventListener("click", function() {
            a.style.display = "block";
            n.load(q + "bed.json", w, null, null, !0);
            t.push("Q")
        });
        document.getElementById("load-2").addEventListener("click", function() {
            a.style.display = "block";
            n.load(q + "dresser.json", w, null, null, !0);
            t.push("D")
        });
        document.getElementById("load-3").addEventListener("click",
            function() {
                a.style.display = "block";
                n.load(q + "bookshelf.json", w, null, null, !0);
                t.push("B")
            });
        document.getElementById("load-4").addEventListener("click", function() {
            a.style.display = "block";
            n.load(q + "nightstand.json", w, null, null, !0);
            t.push("N")
        });
        document.getElementById("load-5").addEventListener("click", function() {
            var a = k.get_selectable_objects(),
                b = "$",
                c = !1,
                f = t.slice(0);
            u.sort();
            u.reverse();
            for (var e = 0; e < u.length; e++) f.splice(u[e], 1);
            for (e = 0; e < a.length; e++) {
                var g = a[e];
                1 == m.get_sensor_value(g, "COLLISION",
                    0) && (c = !0);
                g = h.get_object_bounding_box(g);
                b = b + f[e] + "," + g.min_x.toFixed(3) + "," + g.max_x.toFixed(3) + "," + g.min_y.toFixed(3) + "," + g.max_y.toFixed(3) + "," + g.min_z.toFixed(3) + "," + g.max_z.toFixed(3) + "$"
            }
            0 == c ? prompt("Here is your result! Please copy (CTRL+C) and paste into survey.", b) : window.alert("Please ensure there are no overlapping objects and try again.")
        });
        document.getElementById("delete").addEventListener("click", function() {
            if (f) {
                var a = g.get_object_data_id(f);
                u.push(a - 1);
                n.unload(a);
                f = null
            }
        });
        document.getElementById("rot-ccw").addEventListener("click",
            function() {
                f && I(f, J)
            });
        document.getElementById("rot-cw").addEventListener("click", function() {
            f && I(f, -J)
        })
    }

    function V() {
        for (var a = ["delete", "rot-ccw", "rot-cw"], d = 0; d < a.length; d++) {
            var b = a[d];
            document.getElementById(b).addEventListener("mousedown", function(a) {
                a.target.parentNode.classList.add("active")
            });
            document.getElementById(b).addEventListener("mouseup", function(a) {
                a.target.parentNode.classList.remove("active")
            });
            document.getElementById(b).addEventListener("touchstart", function(a) {
                a.target.parentNode.classList.add("active")
            });
            document.getElementById(b).addEventListener("touchend", function(a) {
                a.target.parentNode.classList.remove("active")
            })
        }
    }

    function w(a) {
        var d = document.getElementById("spinner-container");
        a = g.get_all_objects("ALL", a);
        for (var b = 0; b < a.length; b++) {
            var c = a[b];
            if (K.has_physics(c)) {
                K.enable_simulation(c);
                var e = m.create_collision_sensor(c, "FURNITURE"),
                    l = m.create_selection_sensor(c, !0);
                c == f && m.set_custom_sensor(l, 1);
                m.create_sensor_manifold(c, "COLLISION", m.CT_CONTINUOUS, [e, l], W, X);
                (e = k.get_parent(c)) && k.is_armature(e) ?
                    h.set_translation_v(e, B) : h.set_translation_v(c, B)
            }
            k.is_mesh(c) && (g.show_object(c), d.style.display = "none")
        }
    }

    function W(a) {
        return a[1]
    }

    function X(a, d, b) {
        1 == b && (m.get_sensor_value(a, d, 0) ? g.set_outline_color(Y) : g.set_outline_color(Z))
    }

    function I(a, d) {
        var b = k.get_parent(a);
        if (b && k.is_armature(b)) {
            var c = h.get_rotation(b, L);
            M.rotateZ(c, d, c);
            h.set_rotation_v(b, c)
        } else c = h.get_rotation(a, L), M.rotateZ(c, d, c), h.set_rotation_v(a, c);
        N(a)
    }

    function F(a) {
        C = !0;
        a.preventDefault && a.preventDefault();
        var d = x.get_coords_x(a);
        a = x.get_coords_y(a);
        var b = g.pick_object(d, a);
        f != b && (f && g.clear_outline_anim(f), b && g.apply_outline_anim(b, 1, 1, 0), f = b);
        if (f) {
            var b = g.get_active_camera(),
                c = k.get_parent(f);
            c && k.is_armature(c) ? h.get_translation(c, p) : h.get_translation(f, p);
            O.project_point(b, p, l);
            l[0] = d - l[0];
            l[1] = a - l[1]
        }
    }

    function G() {
        C = !1;
        y || (r.enable_camera_controls(), y = !0)
    }

    function H(a) {
        if (C && f) {
            y && (r.disable_camera_controls(), y = !1);
            var d = g.get_active_camera(),
                b = x.get_coords_x(a);
            a = x.get_coords_y(a);
            0 <= b && 0 <= a && (b -= l[0], a -= l[1], b = O.calc_ray(d,
                b, a, z), b = v.get_pline_directional_vec(b, p), d = h.get_translation(d, aa), v.set_pline_initial_point(z, d), v.set_pline_directional_vec(z, b), (d = v.line_plane_intersect(ba, 0, z, ca)) && 0 > b[2] && ((b = k.get_parent(f)) && k.is_armature(b) ? h.set_translation_v(b, d) : h.set_translation_v(f, d), N(f)))
        }
    }

    function N(a) {
        var d = h.get_object_bounding_box(a),
            b = k.get_parent(a),
            c = b && k.is_armature(b) ? h.get_translation(b, p) : h.get_translation(a, p);
        3.35 < d.max_x ? c[0] -= d.max_x - 3.35 : 0 > d.min_x && (c[0] += 0 - d.min_x);
        3.048 < d.max_y ? c[1] -= d.max_y - 3.048 :
            0 > d.min_y && (c[1] += 0 - d.min_y);
        b && k.is_armature(b) ? h.set_translation_v(b, c) : h.set_translation_v(a, c)
    }
    var r = e("app"),
        O = e("camera"),
        da = e("config"),
        A = e("container"),
        m = e("controls"),
        n = e("data"),
        x = e("mouse"),
        v = e("math"),
        k = e("objects"),
        K = e("physics"),
        E = e("preloader"),
        g = e("scenes"),
        h = e("transform"),
        P = e("version"),
        P = e("version"),
        M = e("quat"),
        D = "DEBUG" === P.type(),
        Z = [0, 1, 0],
        Y = [1, 0, 0],
        ba = [0, 0, 1],
        J = Math.PI / 2,
        q = da.get_std_assets_path("Bedroom Survey"),
        l = new Float32Array(2),
        B = new Float32Array(3),
        p = new Float32Array(3),
        aa = new Float32Array(3),
        ca = new Float32Array(3),
        L = new Float32Array(4),
        z = v.create_pline(),
        C = !1,
        y = !0,
        t = [],
        u = [],
        f = null;
    Q.init = function() {
        var a = D,
            d = r.get_url_params();
        d && "show_fps" in d && (a = !0);
        r.init({
            canvas_container_id: "main_canvas_container",
            callback: R,
            physics_enabled: !0,
            show_fps: a,
            alpha: !1,
            assets_dds_available: !D,
            assets_min50_available: !D,
            background_color: [1, 1, 1, 0]
        })
    }
});
b4w.require("Bedroom Survey").init();